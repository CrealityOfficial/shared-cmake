list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/conan/")

if(EXISTS ${CMAKE_BINARY_DIR}/conan_paths.cmake)
	include(${CMAKE_BINARY_DIR}/conan_paths.cmake)
	message(STATUS "Conan Use conan_paths.cmake")
	set(HAVE_CONAN_CACHE 1)
elseif(EXISTS ${CMAKE_BINARY_DIR}/conanbuildinfo_multi.cmake)
	include(${CMAKE_BINARY_DIR}/conanbuildinfo_multi.cmake)
	message(STATUS "Conan Use conanbuildinfo_multi.cmake")
	set(HAVE_CONAN_CACHE 1)
else()
	message(STATUS "Disable Conan")
	set(HAVE_CONAN_CACHE 0)
	if(CMAKE_USE_CONAN)
		message(STATUS "CMAKE_USE_CONAN, But Disabled")
	endif()
endif()

if(CMAKE_USE_CONAN)
endif()

macro(__conan_find)
	message(STATUS "CONAN ****** Start Find ${ARGN}")
	find_package(_conan_${ARGN})
	message(STATUS "CONAN ****** End Find ${ARGN}")
endmacro()

macro(__conan_import package type)
	cmake_parse_arguments(package "" "" "COMPONENT" ${ARGN})
	set(Components)
	if(package_COMPONENT)
		set(Components ${package_COMPONENT})
	else()
		set(Components ${package})
	endif()
	message(STATUS "__conan_import ${package} [${Components}]")
	
	string(TOUPPER ${package} UPPER_PACKAGE)
	if(CONAN_${UPPER_PACKAGE}_ROOT_RELEASE)
		set(DEBUG_ROOT ${CONAN_${UPPER_PACKAGE}_ROOT_DEBUG})
		set(RELEASE_ROOT ${CONAN_${UPPER_PACKAGE}_ROOT_RELEASE})
		foreach(_component ${Components})
			if(NOT TARGET ${_component})
				set(${_component}_INCLUDE_DIRS ${RELEASE_ROOT}/include/)
				
				if(CC_BC_WIN)
					set(${_component}_LIBRARIES_DEBUG "${DEBUG_ROOT}/lib/${_component}.lib")
					set(${_component}_LIBRARIES_RELEASE "${RELEASE_ROOT}/lib/${_component}.lib")
					set(${_component}_LOC_DEBUG "${DEBUG_ROOT}/bin/${_component}.dll")
					set(${_component}_LOC_RELEASE "${RELEASE_ROOT}/bin/${_component}.dll")
				elseif(CC_BC_LINUX)
					if(${type} STREQUAL "dll")
						set(${_component}_LIBRARIES_DEBUG "${DEBUG_ROOT}/bin/Debug/lib${_component}.so")
						set(${_component}_LIBRARIES_RELEASE "${RELEASE_ROOT}/bin/Release/lib${_component}.so")
						set(${_component}_LOC_DEBUG "${DEBUG_ROOT}/lib/Debug/lib${_component}.so")
						set(${_component}_LOC_RELEASE "${RELEASE_ROOT}/lib/Release/lib${_component}.so")
					else()
						set(${_component}_LIBRARIES_DEBUG "${DEBUG_ROOT}/lib/lib${_component}.a")
						set(${_component}_LIBRARIES_RELEASE "${RELEASE_ROOT}/lib/lib${_component}.a")
					endif()		
				endif()
				
				__test_import(${_component} ${type})
			endif()
		endforeach()
	endif()
endmacro()
